{"version":3,"sources":["index.js"],"names":["JsPlatform","uaString","window","navigator","userAgent","IS_IPAD","test","IS_ANDROID","IS_IPHONE","IS_IPOD","platform","IS_IOS"],"mappings":";AA6De,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,QAAA,gBAAA,EAvCFA,IAAAA,EAuCE,WAtCwC,SAAA,IAAvCC,IAAAA,EAAWC,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,OAAOC,UAAUC,UAAW,EAAA,KAAA,GAC1CH,KAAAA,SAAWA,EAqCT,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,KA5BF,IAAA,WACCI,IAAAA,EAAW,QAASC,KAAK,KAAKL,UAC9BM,EAAc,WAAYD,KAAK,KAAKL,UAMpCO,EAAa,UAAWF,KAAK,KAAKL,YAAcI,EAChDI,EAAW,QAASH,KAAK,KAAKL,UAK5B,QAAA,GACFM,KAAAA,EAEKG,MADI,UAETC,KARSH,GAAaH,GAAWI,EAU5BC,MADI,MAEf,QAEWA,MADI,eAMR,EAAA,GAAA,QAAA,WAAA,EAAA,IAAA,EAAA,IAAIV,EAAJ,QAAA,QAAA","file":"index.umd.map","sourceRoot":"../src","sourcesContent":["/**\n * @class JsPlatform\n * @description JsPlatform is a library that allow you to get platform wherever you are\n * (iphone, ipad, android or desktop);\n * @param {String} uaString user agent string\n *\n * @example\n * const Platform = new JsPlatform();\n *\n * switch(Platform.OS){\n *  case 'android':\n *      console.log(\"I'm an android! \");\n *      break;\n *  case 'ios':\n *      console.log(\"I'm an ios! \");\n *      break;\n *  case 'desktop':\n *      console.log(\"I'm a desktop! \");\n *      break;\n * }\n */\n\nexport class JsPlatform {\n    constructor(uaString = window.navigator.userAgent) {\n        this.uaString = uaString;\n    }\n\n    /**\n     * Get the user agent string\n     * @return {String} user agent string.\n     * @example\n     * const myUserAgent = JsPlatform.OS;\n     */\n    get OS() {\n        const IS_IPAD = (/iPad/i).test(this.uaString);\n        const IS_ANDROID = (/Android/i).test(this.uaString);\n\n        // The Facebook app's UIWebView identifies as both an iPhone and iPad, so\n        // to identify iPhones, we need to exclude iPads.\n        // http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\n\n        const IS_IPHONE = (/iPhone/i).test(this.uaString) && !IS_IPAD;\n        const IS_IPOD = (/iPod/i).test(this.uaString);\n        const IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\n\n        let platform = '';\n\n        switch (true) {\n        case (IS_ANDROID):\n            platform = 'android';\n            return platform;\n        case (IS_IOS):\n            platform = 'ios';\n            return platform;\n        default:\n            platform = 'desktop';\n            return platform;\n        }\n    }\n}\n\nexport default new JsPlatform();\n"]}